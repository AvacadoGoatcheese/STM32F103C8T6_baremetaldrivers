
stm32f103c8t6_baremetal_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000520  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000650  08000658  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000650  08000650  00010658  2**0
                  CONTENTS
  4 .ARM          00000000  08000650  08000650  00010658  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000650  08000658  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000650  08000650  00010650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000654  08000654  00010654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000658  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000658  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010681  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000076b  00000000  00000000  000106c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000026e  00000000  00000000  00010e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000110a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007f  00000000  00000000  00011158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c0f  00000000  00000000  000111d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f1e  00000000  00000000  00012de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006452  00000000  00000000  00013d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000224  00000000  00000000  0001a158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0001a37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000638 	.word	0x08000638

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000638 	.word	0x08000638

08000170 <delay>:

#include "stm32f103xx.h"
#include "stm32f103xx_gpio_driver.h"


void delay(int volatile count) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	while (count-- > 0);
 8000178:	bf00      	nop
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1e5a      	subs	r2, r3, #1
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	2b00      	cmp	r3, #0
 8000182:	dcfa      	bgt.n	800017a <delay+0xa>
}
 8000184:	bf00      	nop
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr

08000190 <main>:

int main(void) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
	GPIO_Handle_t LEDGPIO;
	LEDGPIO.pGPIOx = GPIOC;
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <main+0x38>)
 8000198:	603b      	str	r3, [r7, #0]

	LEDGPIO.GPIO_PinConfig.GPIO_PinNumber = 13;
 800019a:	230d      	movs	r3, #13
 800019c:	713b      	strb	r3, [r7, #4]
	LEDGPIO.GPIO_PinConfig.GPIO_PinConfig = GPIO_CNFOUT_PUSHPULL;
 800019e:	2304      	movs	r3, #4
 80001a0:	71bb      	strb	r3, [r7, #6]

	LEDGPIO.GPIO_PinConfig.GPIO_PinModeY = GPIO_MODE_OUT_2MHZ;
 80001a2:	2302      	movs	r3, #2
 80001a4:	717b      	strb	r3, [r7, #5]
	GPIO_PCLKControl(GPIOC, ENABLE);
 80001a6:	2101      	movs	r1, #1
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <main+0x38>)
 80001aa:	f000 f955 	bl	8000458 <GPIO_PCLKControl>

	GPIO_Init(&LEDGPIO);
 80001ae:	463b      	mov	r3, r7
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f837 	bl	8000224 <GPIO_Init>

	while (1) {
		GPIO_ToggleOutputPin(GPIOC, 13);
 80001b6:	210d      	movs	r1, #13
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <main+0x38>)
 80001ba:	f000 fa05 	bl	80005c8 <GPIO_ToggleOutputPin>
		delay(500000);
 80001be:	4803      	ldr	r0, [pc, #12]	; (80001cc <main+0x3c>)
 80001c0:	f7ff ffd6 	bl	8000170 <delay>
		GPIO_ToggleOutputPin(GPIOC, 13);
 80001c4:	e7f7      	b.n	80001b6 <main+0x26>
 80001c6:	bf00      	nop
 80001c8:	40011000 	.word	0x40011000
 80001cc:	0007a120 	.word	0x0007a120

080001d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d8:	480c      	ldr	r0, [pc, #48]	; (800020c <LoopForever+0x6>)
  ldr r1, =_edata
 80001da:	490d      	ldr	r1, [pc, #52]	; (8000210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001dc:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <LoopForever+0xe>)
  movs r3, #0
 80001de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e0:	e002      	b.n	80001e8 <LoopCopyDataInit>

080001e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001e6:	3304      	adds	r3, #4

080001e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001ec:	d3f9      	bcc.n	80001e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f0:	4c0a      	ldr	r4, [pc, #40]	; (800021c <LoopForever+0x16>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f4:	e001      	b.n	80001fa <LoopFillZerobss>

080001f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f8:	3204      	adds	r2, #4

080001fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001fc:	d3fb      	bcc.n	80001f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001fe:	f000 f9f7 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000202:	f7ff ffc5 	bl	8000190 <main>

08000206 <LoopForever>:

LoopForever:
  b LoopForever
 8000206:	e7fe      	b.n	8000206 <LoopForever>
  ldr   r0, =_estack
 8000208:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800020c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000210:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000214:	08000658 	.word	0x08000658
  ldr r2, =_sbss
 8000218:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800021c:	2000001c 	.word	0x2000001c

08000220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000220:	e7fe      	b.n	8000220 <ADC1_2_IRQHandler>
	...

08000224 <GPIO_Init>:
 *
 * @return				- OK (0) or ERROR (1)
 *
 * @Note				- none
********************************************/
uint8_t GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000224:	b480      	push	{r7}
 8000226:	b089      	sub	sp, #36	; 0x24
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint8_t *pinNum 	= &((pGPIOHandle->GPIO_PinConfig).GPIO_PinNumber);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3304      	adds	r3, #4
 8000230:	617b      	str	r3, [r7, #20]
	uint8_t *pinMode 	= &((pGPIOHandle->GPIO_PinConfig).GPIO_PinModeY);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3305      	adds	r3, #5
 8000236:	613b      	str	r3, [r7, #16]
	uint8_t *pinConfig 	= &((pGPIOHandle->GPIO_PinConfig).GPIO_PinConfig);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3306      	adds	r3, #6
 800023c:	60fb      	str	r3, [r7, #12]

	if (*pinConfig == GPIO_CNFIN_RESERVED || *pinNum > 16) {
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d003      	beq.n	800024e <GPIO_Init+0x2a>
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b10      	cmp	r3, #16
 800024c:	d901      	bls.n	8000252 <GPIO_Init+0x2e>
		return ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	e0e9      	b.n	8000426 <GPIO_Init+0x202>
	}

	if (*pinMode < GPIO_MODE_INT_FT) {
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b03      	cmp	r3, #3
 8000258:	d842      	bhi.n	80002e0 <GPIO_Init+0xbc>
			 * There are 2 sets of registers. One for pins 1-7 and the other for pins 8-15.
			 * In interest of keeping code length to a minimum, we are only changing the registers
			 * and the effective pin number (with regards to the register numbering) to keep the code
			 * identical for the low and high control registers (CRL/CRH).
			 */
			uint32_t _vo *GPIO_Ctrl_Reg = &(pGPIOHandle->pGPIOx->CRL);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	61fb      	str	r3, [r7, #28]
			if (*pinNum >= 8) {
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b07      	cmp	r3, #7
 8000266:	d909      	bls.n	800027c <GPIO_Init+0x58>
				*pinNum -= 8;
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	3b08      	subs	r3, #8
 800026e:	b2da      	uxtb	r2, r3
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	701a      	strb	r2, [r3, #0]
				GPIO_Ctrl_Reg = &(pGPIOHandle->pGPIOx->CRH);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3304      	adds	r3, #4
 800027a:	61fb      	str	r3, [r7, #28]
			}

			if (*pinMode > GPIO_MODE_INP) {
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d005      	beq.n	8000290 <GPIO_Init+0x6c>
				 * isn't input, then we need to use the second range. Otherwise we use the first range.
				 *
				 * If we use the second range, then we need to subtract 4 from the second range to keep it
				 * representable in binary with 2 bits (AKA 0, 1, 2, 3).
				 */
				*pinConfig -= 4;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	3b04      	subs	r3, #4
 800028a:	b2da      	uxtb	r2, r3
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	701a      	strb	r2, [r3, #0]

			}

			*GPIO_Ctrl_Reg 		&= ~( 0x0000000F << (4 * (*pinNum)) ); // Clearing bits that were there beforehand.
 8000290:	69fb      	ldr	r3, [r7, #28]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	7812      	ldrb	r2, [r2, #0]
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	210f      	movs	r1, #15
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	401a      	ands	r2, r3
 80002a4:	69fb      	ldr	r3, [r7, #28]
 80002a6:	601a      	str	r2, [r3, #0]
			*GPIO_Ctrl_Reg 		|= ( *pinMode << (4 * (*pinNum)) );
 80002a8:	69fb      	ldr	r3, [r7, #28]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	693a      	ldr	r2, [r7, #16]
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	4611      	mov	r1, r2
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	7812      	ldrb	r2, [r2, #0]
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	431a      	orrs	r2, r3
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	601a      	str	r2, [r3, #0]
			*GPIO_Ctrl_Reg 		|= ( *pinConfig << (4 * (*pinNum) + 2) );
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	7812      	ldrb	r2, [r2, #0]
 80002ca:	4611      	mov	r1, r2
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	7812      	ldrb	r2, [r2, #0]
 80002d0:	0092      	lsls	r2, r2, #2
 80002d2:	3202      	adds	r2, #2
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	431a      	orrs	r2, r3
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	e0a1      	b.n	8000424 <GPIO_Init+0x200>
	} else {
		// Probably AFIO
		AFIO_PCLK_EN();
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <GPIO_Init+0x20c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a52      	ldr	r2, [pc, #328]	; (8000430 <GPIO_Init+0x20c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6193      	str	r3, [r2, #24]
		uint8_t port = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	76fb      	strb	r3, [r7, #27]

		if		(pGPIOHandle->pGPIOx == GPIOA) 		{ port = 0; }
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a4f      	ldr	r2, [pc, #316]	; (8000434 <GPIO_Init+0x210>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d102      	bne.n	8000300 <GPIO_Init+0xdc>
 80002fa:	2300      	movs	r3, #0
 80002fc:	76fb      	strb	r3, [r7, #27]
 80002fe:	e02e      	b.n	800035e <GPIO_Init+0x13a>
		else if (pGPIOHandle->pGPIOx == GPIOB) 		{ port = 1; }
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a4c      	ldr	r2, [pc, #304]	; (8000438 <GPIO_Init+0x214>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d102      	bne.n	8000310 <GPIO_Init+0xec>
 800030a:	2301      	movs	r3, #1
 800030c:	76fb      	strb	r3, [r7, #27]
 800030e:	e026      	b.n	800035e <GPIO_Init+0x13a>
		else if (pGPIOHandle->pGPIOx == GPIOC) 		{ port = 2; }
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a49      	ldr	r2, [pc, #292]	; (800043c <GPIO_Init+0x218>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d102      	bne.n	8000320 <GPIO_Init+0xfc>
 800031a:	2302      	movs	r3, #2
 800031c:	76fb      	strb	r3, [r7, #27]
 800031e:	e01e      	b.n	800035e <GPIO_Init+0x13a>
		else if (pGPIOHandle->pGPIOx == GPIOD) 		{ port = 3; }
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a46      	ldr	r2, [pc, #280]	; (8000440 <GPIO_Init+0x21c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d102      	bne.n	8000330 <GPIO_Init+0x10c>
 800032a:	2303      	movs	r3, #3
 800032c:	76fb      	strb	r3, [r7, #27]
 800032e:	e016      	b.n	800035e <GPIO_Init+0x13a>
		else if (pGPIOHandle->pGPIOx == GPIOE) 		{ port = 4; }
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a43      	ldr	r2, [pc, #268]	; (8000444 <GPIO_Init+0x220>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d102      	bne.n	8000340 <GPIO_Init+0x11c>
 800033a:	2304      	movs	r3, #4
 800033c:	76fb      	strb	r3, [r7, #27]
 800033e:	e00e      	b.n	800035e <GPIO_Init+0x13a>
		else if (pGPIOHandle->pGPIOx == GPIOF) 		{ port = 5; }
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a40      	ldr	r2, [pc, #256]	; (8000448 <GPIO_Init+0x224>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d102      	bne.n	8000350 <GPIO_Init+0x12c>
 800034a:	2305      	movs	r3, #5
 800034c:	76fb      	strb	r3, [r7, #27]
 800034e:	e006      	b.n	800035e <GPIO_Init+0x13a>
		else if (pGPIOHandle->pGPIOx == GPIOG) 		{ port = 6; }
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a3d      	ldr	r2, [pc, #244]	; (800044c <GPIO_Init+0x228>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d101      	bne.n	800035e <GPIO_Init+0x13a>
 800035a:	2306      	movs	r3, #6
 800035c:	76fb      	strb	r3, [r7, #27]


		// Set EXTIx line to selected port (x=A..G) using EXTICRy registers (y=1..4)
		AFIO->AFIO_EXTICR[*pinNum / 4] &= (uint32_t)(~(0xF) << 4 * (*pinNum % 4));
 800035e:	4a3c      	ldr	r2, [pc, #240]	; (8000450 <GPIO_Init+0x22c>)
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	089b      	lsrs	r3, r3, #2
 8000366:	b2d8      	uxtb	r0, r3
 8000368:	4603      	mov	r3, r0
 800036a:	3302      	adds	r3, #2
 800036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000370:	697a      	ldr	r2, [r7, #20]
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	f002 0203 	and.w	r2, r2, #3
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	f06f 010f 	mvn.w	r1, #15
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	4933      	ldr	r1, [pc, #204]	; (8000450 <GPIO_Init+0x22c>)
 8000384:	401a      	ands	r2, r3
 8000386:	1c83      	adds	r3, r0, #2
 8000388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AFIO->AFIO_EXTICR[*pinNum / 4] |= (uint32_t)(port << 4 * (*pinNum % 4));
 800038c:	4a30      	ldr	r2, [pc, #192]	; (8000450 <GPIO_Init+0x22c>)
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	089b      	lsrs	r3, r3, #2
 8000394:	b2d8      	uxtb	r0, r3
 8000396:	4603      	mov	r3, r0
 8000398:	3302      	adds	r3, #2
 800039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039e:	7ef9      	ldrb	r1, [r7, #27]
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	f002 0203 	and.w	r2, r2, #3
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	fa01 f202 	lsl.w	r2, r1, r2
 80003ae:	4928      	ldr	r1, [pc, #160]	; (8000450 <GPIO_Init+0x22c>)
 80003b0:	431a      	orrs	r2, r3
 80003b2:	1c83      	adds	r3, r0, #2
 80003b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//			pGPIOHandle->pGPIOx->AFIO_EXTICR4 |= (uint32_t)(port << 4 * (*pinNum - 12));
//		}


		// Select whether interrupt runs on Rising or Falling edge
		if (*pinMode == GPIO_MODE_INT_FT) {
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b04      	cmp	r3, #4
 80003be:	d10a      	bne.n	80003d6 <GPIO_Init+0x1b2>
			EXTI_LINE_ENABLE_FT(*pinNum);
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <GPIO_Init+0x230>)
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4619      	mov	r1, r3
 80003ca:	2301      	movs	r3, #1
 80003cc:	408b      	lsls	r3, r1
 80003ce:	4921      	ldr	r1, [pc, #132]	; (8000454 <GPIO_Init+0x230>)
 80003d0:	4313      	orrs	r3, r2
 80003d2:	60cb      	str	r3, [r1, #12]
 80003d4:	e026      	b.n	8000424 <GPIO_Init+0x200>
		} else if (*pinMode == GPIO_MODE_INT_RT) {
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b05      	cmp	r3, #5
 80003dc:	d10a      	bne.n	80003f4 <GPIO_Init+0x1d0>
			EXTI_LINE_ENABLE_RT(*pinNum);
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <GPIO_Init+0x230>)
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	2301      	movs	r3, #1
 80003ea:	408b      	lsls	r3, r1
 80003ec:	4919      	ldr	r1, [pc, #100]	; (8000454 <GPIO_Init+0x230>)
 80003ee:	4313      	orrs	r3, r2
 80003f0:	608b      	str	r3, [r1, #8]
 80003f2:	e017      	b.n	8000424 <GPIO_Init+0x200>
		} else if (*pinMode == GPIO_MODE_INT_RFT) {
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b06      	cmp	r3, #6
 80003fa:	d113      	bne.n	8000424 <GPIO_Init+0x200>
			EXTI_LINE_ENABLE_FT(*pinNum);
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <GPIO_Init+0x230>)
 80003fe:	68da      	ldr	r2, [r3, #12]
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4619      	mov	r1, r3
 8000406:	2301      	movs	r3, #1
 8000408:	408b      	lsls	r3, r1
 800040a:	4912      	ldr	r1, [pc, #72]	; (8000454 <GPIO_Init+0x230>)
 800040c:	4313      	orrs	r3, r2
 800040e:	60cb      	str	r3, [r1, #12]
			EXTI_LINE_ENABLE_RT(*pinNum);
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <GPIO_Init+0x230>)
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	2301      	movs	r3, #1
 800041c:	408b      	lsls	r3, r1
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <GPIO_Init+0x230>)
 8000420:	4313      	orrs	r3, r2
 8000422:	608b      	str	r3, [r1, #8]
		}
	}

	// Assuming control reaches here without errors, return OK
	return OK;
 8000424:	2300      	movs	r3, #0

}
 8000426:	4618      	mov	r0, r3
 8000428:	3724      	adds	r7, #36	; 0x24
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010800 	.word	0x40010800
 8000438:	40010c00 	.word	0x40010c00
 800043c:	40011000 	.word	0x40011000
 8000440:	40011400 	.word	0x40011400
 8000444:	40011800 	.word	0x40011800
 8000448:	40011c00 	.word	0x40011c00
 800044c:	40012000 	.word	0x40012000
 8000450:	40010000 	.word	0x40010000
 8000454:	40010400 	.word	0x40010400

08000458 <GPIO_PCLKControl>:
 *
 * @return				- none
 *
 * @Note				- none
********************************************/
void GPIO_PCLKControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d14c      	bne.n	8000504 <GPIO_PCLKControl+0xac>
		// Figure out a nicer way to do this
		if		(pGPIOx == GPIOA) 		{ GPIOA_PCLK_EN(); }
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a4e      	ldr	r2, [pc, #312]	; (80005a8 <GPIO_PCLKControl+0x150>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PCLKControl+0x28>
 8000472:	4b4e      	ldr	r3, [pc, #312]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a4d      	ldr	r2, [pc, #308]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	6193      	str	r3, [r2, #24]
		else if (pGPIOx == GPIOD) 		{ GPIOD_PCLK_DI(); }
		else if (pGPIOx == GPIOE) 		{ GPIOE_PCLK_DI(); }
		else if (pGPIOx == GPIOF) 		{ GPIOF_PCLK_DI(); }
		else if (pGPIOx == GPIOG) 		{ GPIOG_PCLK_DI(); }
	}
}
 800047e:	e08d      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOB) 		{ GPIOB_PCLK_EN(); }
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a4b      	ldr	r2, [pc, #300]	; (80005b0 <GPIO_PCLKControl+0x158>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PCLKControl+0x3e>
 8000488:	4b48      	ldr	r3, [pc, #288]	; (80005ac <GPIO_PCLKControl+0x154>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a47      	ldr	r2, [pc, #284]	; (80005ac <GPIO_PCLKControl+0x154>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6193      	str	r3, [r2, #24]
}
 8000494:	e082      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOC) 		{ GPIOC_PCLK_EN(); }
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a46      	ldr	r2, [pc, #280]	; (80005b4 <GPIO_PCLKControl+0x15c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PCLKControl+0x54>
 800049e:	4b43      	ldr	r3, [pc, #268]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a42      	ldr	r2, [pc, #264]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004a4:	f043 0310 	orr.w	r3, r3, #16
 80004a8:	6193      	str	r3, [r2, #24]
}
 80004aa:	e077      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOD) 		{ GPIOD_PCLK_EN(); }
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a42      	ldr	r2, [pc, #264]	; (80005b8 <GPIO_PCLKControl+0x160>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PCLKControl+0x6a>
 80004b4:	4b3d      	ldr	r3, [pc, #244]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a3c      	ldr	r2, [pc, #240]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6193      	str	r3, [r2, #24]
}
 80004c0:	e06c      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOE) 		{ GPIOE_PCLK_EN(); }
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a3d      	ldr	r2, [pc, #244]	; (80005bc <GPIO_PCLKControl+0x164>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PCLKControl+0x80>
 80004ca:	4b38      	ldr	r3, [pc, #224]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a37      	ldr	r2, [pc, #220]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d4:	6193      	str	r3, [r2, #24]
}
 80004d6:	e061      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOF) 		{ GPIOF_PCLK_EN(); }
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a39      	ldr	r2, [pc, #228]	; (80005c0 <GPIO_PCLKControl+0x168>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PCLKControl+0x96>
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a31      	ldr	r2, [pc, #196]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ea:	6193      	str	r3, [r2, #24]
}
 80004ec:	e056      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOG) 		{ GPIOG_PCLK_EN(); }
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a34      	ldr	r2, [pc, #208]	; (80005c4 <GPIO_PCLKControl+0x16c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d152      	bne.n	800059c <GPIO_PCLKControl+0x144>
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a2c      	ldr	r2, [pc, #176]	; (80005ac <GPIO_PCLKControl+0x154>)
 80004fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000500:	6193      	str	r3, [r2, #24]
}
 8000502:	e04b      	b.n	800059c <GPIO_PCLKControl+0x144>
		if		(pGPIOx == GPIOA) 		{ GPIOA_PCLK_DI(); }
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <GPIO_PCLKControl+0x150>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_PCLKControl+0xc2>
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <GPIO_PCLKControl+0x154>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000512:	f023 0304 	bic.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
}
 8000518:	e040      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOB) 		{ GPIOB_PCLK_DI(); }
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <GPIO_PCLKControl+0x158>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_PCLKControl+0xd8>
 8000522:	4b22      	ldr	r3, [pc, #136]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a21      	ldr	r2, [pc, #132]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000528:	f023 0308 	bic.w	r3, r3, #8
 800052c:	6193      	str	r3, [r2, #24]
}
 800052e:	e035      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOC) 		{ GPIOC_PCLK_DI(); }
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <GPIO_PCLKControl+0x15c>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d106      	bne.n	8000546 <GPIO_PCLKControl+0xee>
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <GPIO_PCLKControl+0x154>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <GPIO_PCLKControl+0x154>)
 800053e:	f023 0310 	bic.w	r3, r3, #16
 8000542:	6193      	str	r3, [r2, #24]
}
 8000544:	e02a      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOD) 		{ GPIOD_PCLK_DI(); }
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <GPIO_PCLKControl+0x160>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_PCLKControl+0x104>
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000554:	f023 0320 	bic.w	r3, r3, #32
 8000558:	6193      	str	r3, [r2, #24]
}
 800055a:	e01f      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOE) 		{ GPIOE_PCLK_DI(); }
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <GPIO_PCLKControl+0x164>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d106      	bne.n	8000572 <GPIO_PCLKControl+0x11a>
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a10      	ldr	r2, [pc, #64]	; (80005ac <GPIO_PCLKControl+0x154>)
 800056a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800056e:	6193      	str	r3, [r2, #24]
}
 8000570:	e014      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOF) 		{ GPIOF_PCLK_DI(); }
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <GPIO_PCLKControl+0x168>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PCLKControl+0x130>
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <GPIO_PCLKControl+0x154>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000584:	6193      	str	r3, [r2, #24]
}
 8000586:	e009      	b.n	800059c <GPIO_PCLKControl+0x144>
		else if (pGPIOx == GPIOG) 		{ GPIOG_PCLK_DI(); }
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <GPIO_PCLKControl+0x16c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d105      	bne.n	800059c <GPIO_PCLKControl+0x144>
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <GPIO_PCLKControl+0x154>)
 8000596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800059a:	6193      	str	r3, [r2, #24]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40011000 	.word	0x40011000
 80005b8:	40011400 	.word	0x40011400
 80005bc:	40011800 	.word	0x40011800
 80005c0:	40011c00 	.word	0x40011c00
 80005c4:	40012000 	.word	0x40012000

080005c8 <GPIO_ToggleOutputPin>:
 *
 * @return				- none
 *
 * @Note				- none
********************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1U << PinNumber);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	405a      	eors	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60da      	str	r2, [r3, #12]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2600      	movs	r6, #0
 80005f4:	4d0c      	ldr	r5, [pc, #48]	; (8000628 <__libc_init_array+0x38>)
 80005f6:	4c0d      	ldr	r4, [pc, #52]	; (800062c <__libc_init_array+0x3c>)
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	42a6      	cmp	r6, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	f000 f81a 	bl	8000638 <_init>
 8000604:	2600      	movs	r6, #0
 8000606:	4d0a      	ldr	r5, [pc, #40]	; (8000630 <__libc_init_array+0x40>)
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <__libc_init_array+0x44>)
 800060a:	1b64      	subs	r4, r4, r5
 800060c:	10a4      	asrs	r4, r4, #2
 800060e:	42a6      	cmp	r6, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f855 3b04 	ldr.w	r3, [r5], #4
 8000618:	4798      	blx	r3
 800061a:	3601      	adds	r6, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000622:	4798      	blx	r3
 8000624:	3601      	adds	r6, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08000650 	.word	0x08000650
 800062c:	08000650 	.word	0x08000650
 8000630:	08000650 	.word	0x08000650
 8000634:	08000654 	.word	0x08000654

08000638 <_init>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr

08000644 <_fini>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr
